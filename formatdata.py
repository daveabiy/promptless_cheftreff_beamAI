# %%
import os
import openai
from openai import OpenAI
import typing
import re

def clean_text(text):
    """
    Clean and preprocess the text to remove background noise.
    
    Args:
        text (str): The raw text from the invoice/order
        
    Returns:
        str: Cleaned text
    """
    # Remove special characters that might be OCR errors
    text = re.sub(r'[^\x00-\x7F]+', ' ', text)
    
    # Remove multiple spaces, newlines and tabs
    text = re.sub(r'\s+', ' ', text)
    
    # Attempt to extract relevant sections
    # Look for common invoice/order keywords and sections
    relevant_sections = []
    
    # Try to find invoice details
    invoice_section = re.search(r'(?i)(invoice|rechnung).*?(date|datum|number|nummer)', text, re.DOTALL)
    if invoice_section:
        relevant_sections.append(invoice_section.group(0))
    
    # Try to find items/products section
    items_section = re.search(r'(?i)(item|artikel|description|beschreibung).*?(price|preis|amount|betrag|sum|total)', text, re.DOTALL)
    if items_section:
        relevant_sections.append(items_section.group(0))
    
    # Try to find totals section
    totals_section = re.search(r'(?i)(total|sum|gesamt|netto|brutto).*?(eur|euro|\$|\â‚¬)', text, re.DOTALL)
    if totals_section:
        relevant_sections.append(totals_section.group(0))
    
    # If we found relevant sections, join them
    if relevant_sections:
        return "\n".join(relevant_sections)
    
    # If no sections found, return original text (LLM will have to do the work)
    return text



def format_data(prompt, data): 
    """
    Format the data for the OpenAI API using the provided prompt.
    
    Args:
        prompt (str): The prompt generated by extract_using_prompt.
        data (str): The raw data to extract information from.
        
    Returns:
        str: Structured data in the specified format
    """
    try:
        # Initialize the client with your API key
        client = OpenAI(
            api_key=os.getenv("OPENAI_API_KEY")
        )
        
        # Clean the text to reduce noise
        cleaned_data = clean_text(data)
        
        # Use the prompt generated by extract_using_prompt
        # Add the cleaned and original data to it
        extraction_prompt = f"""
        {prompt}
        
        
        CLEANED DATA:
        {cleaned_data}
        
        ORIGINAL DATA (use only if needed):
        {data[:2000]}
        """
        
        # Call the API
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a document data extraction specialist, skilled at finding structured information in noisy text."},
                {"role": "user", "content": extraction_prompt}
            ],
            temperature=0.2  # Lower temperature for more deterministic outputs
        )
        
        # Return the assistant's response
        return response.choices[0].message.content.replace('```json', '\n').replace('```', '')
    
    except Exception as e:
        return f"Error: {str(e)}"

